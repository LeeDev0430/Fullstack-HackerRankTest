1. JavaScript: Image Cloning
Create an Image class that supports image cloning. Multiple tools
make copy-pasting images possible by cloning them.
Implementation of class Size is already provided.
	1. This class has a constructor Size(width, height) to set the width and height of the Size object created.

Implement the Image class with the following constructor and
methods:
	1. The constructor Image(String url, Size size) sets the url and size of the image object created.
	2. The method getUrl() returns the url.
	3. The method setUrl(url) updates the url.
	4. The method setSize(width, height) updates the width and height values of the size property.
	5. The method getSize() returns the size of the image as a Size object.
	6. The method clonelmage() returns a clone of the current image.
	Return a new Image instance with the same properties (ur/ and size)as the current object.

The locked stub code validates the correctness of the Image class implementation by performing the following operations on the images:
	• Clone ld. This operation creates a clone of the image.
	• UpdateUr/ ld newUrh This operation updates the urlof the image.
	• UpdateSize ld newWidth newHeight. This operation updates the size of the image.

After performing all the operations, the locked stub code prints the
url and size of each image.


Input Format For Custom Testing
The first line contains an integer n, denoting the total number of images to be created initially.
Each of the next n lines contains 3 values - string url, number width, and number height for construction of n Image objects.
The next line contains the value of numberOfOperations, the total number of operations to be performed.
Each of the next numberOfOperations lines contains one of the
three operations listed above.

Sample Case O
Sample Input For Custom Testing
hackerrank.com/image2 200 200
3
Clone 1
UpdateUrl 1 hackerrank.com/image3
UpdateSize 2 300 400


Sample Output
hackerrank.com/image3 100 100
hackerrank.com/image2 300 400
hackerrank.com/image1 100 100

Explanation
The first line of input contains integer 2, which denotes 2 images
that need to be created initially. 2 images are created with the
inputs from the 2nd and 3rd lines. The next contains number 3,
the number of operations to be performed. The next operation
clones the images with id 1 (i.e. the first image object). The next
line operation updates the url of the image with id 1 to
'hackerrank.com/image3'. The next operation updates the width
and height of the image with id 2 to 300 and 400 respectively.


'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding("ascii");
let inputString = "";
let currentLine = 0;

process.stdin.on("data", function (chunk) {
    inputString += chunk;
});
process.stdin.on("end", function () {
    inputString = inputString.split('\n');
    main();
});

function readLine() {
  return inputString[currentLine++];
}

class Size {
    constructor(width, height) {
        this.width = width;
        this.height = height;
    }
}

class Image {
    // The constructor sets the url and size of the image object
    constructor(url, size) {
        this.url = url;
        this.size = size;
    }

    // The getUrl method returns the url
    getUrl() {
        return this.url;
    }

    // The setUrl method updates the url
    setUrl(url) {
        this.url = url;
    }

    // The setSize method updates the size of the image
    setSize(width, height) {
        this.size.width = width;
        this.size.height = height;
    }

    // The getSize method returns the size of the image as a Size object
    getSize() {
        return this.size;
    }

    // The cloneImage method returns a clone of the current image
    cloneImage() {
        // Create a new Size instance with the same width and height
        const clonedSize = new Size(this.size.width, this.size.height);
        // Return a new Image instance with the same url and cloned size
        return new Image(this.url, clonedSize);
    }
}



function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);
    
    let images = [];
    
    let numberOfImages = parseInt(readLine().trim());
    
    while (numberOfImages-- > 0) {
        let inputs = readLine().trim().split(' ');
        images.push(new Image(inputs[0], new Size(parseInt(inputs[1]), parseInt(inputs[2]))));
    }

    let numberOfOperations = parseInt(readLine().trim());
    while (numberOfOperations-- > 0) {
        let inputs = readLine().trim().split(' ');
        const image = images[parseInt(inputs[1]) - 1];
        const operation = inputs[0];
        
        switch(operation) {
            case 'Clone':
                images.push(image.cloneImage());
                break;
            case 'UpdateUrl':
                image.setUrl(inputs[2]);
                break;
            case 'UpdateSize':
                image.setSize(parseInt(inputs[2]), parseInt(inputs[3]));
                break;
            default:
                break;
        }
    }
    
    images.forEach((img) => {
        const size = img.getSize();
        ws.write(`${img.getUrl()} ${size.width} ${size.height}\n`);
    })
}


2. Javascript: Employee Inheritance
The goal of this problem is to use prototypal inheritance in Javascript.
Implement inheritance as described below-
Create a function Employee that takes a single parameter and
assigns it to member variable 'title'.
Add the following functions to the Employee prototype -
	1. setTit/e- This function take a single parameter and assigns it to the title member variable.
	2. getTitle - This function returns the member variable title.
Create a function Engineer that -
	1. inherits from parent Employee.
	2. takes 2 parameters - title (String) and isManager(boolean) and assigns it to parent's member variable title and self's member variable isManager.
Add these functions to Engineer's existing prototype -
	1. setlsManager- This function take a single parameter and assigns it to the member variable isManager.
	2. get/sManager - This function returns the member variable isManager.
NOTE - The stub code takes care of testing the implementation.
Make sure to inherit the parent. This is being tested too.

Input Format For Custom Testing
The first line contains a string title and boolean isManagervalue
to build Engineer object.
The second line contains the new title value to set on the created
Engineer object.
The third line contains the new isManagervalue to set on the created Engineerobject.

Sample Case O
Sample Input For Custom Testing
STDIN                  Function
Developer false  ->   Engineer title = 'Developer' 
isManager = false
= false
Developer4       -> new title = 'Developer4'
true             -> new isManager =  true

Sample Output

Initial Employee Profile - Title is Developer. Is not a Manager
Final Employee Profile — Title is Developer4. Is a Manager
Engineer . prototype has property set Title: false
Engineer . prototype has property set Title: false
Engineer . prototype has property getIsManager: true
Engineer . prototype has property getIsManager: true

Explanation


The first line of the input is used to create an Engineer with title
as 'Developer' and isManagervalue as false initially. 
The stub code then gets the title and isManagervalues of the created
object prints them. 
The second line of the input is used to update title to 'Developer4' and third line is used to update isManagerto true. 
The stub code then gets the title and isManagervalues of the created object prints them. 
The last 4 of lines of output show checks for the correct prototypal chain.