1. Node.js Express: Recipes Pagination
Your company is creating a new Recipe Management app. As the
NodeJS developer in the company, you have been given the task to
write a basic Express app that fetches the Recipe list from a data-
store.

The request to the route /recipes returns all the paginated recipes
with default values of page and limit. The query parameters that
can be used to set the pagination criteria are:
	• page: The page of the resource to be fetched. Defaults to 1. [NUMBER]
	• limit: The number of items to be returned in a single page. Defaults to 3. [NUMBER]

Routes
/recipes?page&/imit - The route to fetch all the recipes from
the data-store. Optional query parameters, page and limit,
help in controlling the number and position of recipes sent
back as a response bv the server.

Examples
# Express: Recipes Pagination
 
The request to the route `/recipes` returns all the paginated recipes with default values of page and limit. The query parameters that can be used to set the pagination criteria are:
- `page:` The page of the resource to be fetched. Defaults to 1. [NUMBER]
- `limit:` The number of items to be returned in a single page. Defaults to 3. [NUMBER]


### Routes
- `/recipes?page&limit` - The route to fetch all the recipes from the data-store. Optional query parameters, page and limit, help in controlling the number and position of recipes sent back as a response by the server. 

### Examples

- `/recipes` - a GET request to get all recipes

```json
[{
        "id" : 1,
        "name": "Crock Pot Roast"
    },
    {
        "id" : 2,
        "name": "Roasted Asparagus"
    },
    {
        "id" : 3,
        "name": "Curried Lentils and Rice"
    }
]
```

- `/recipes?page=1&limit=2`
```json
[{
        "id" : 1,
        "name": "Crock Pot Roast"
    },
    {
        "id" : 2,
        "name": "Roasted Asparagus"
    }
]
```

var recipes = require('../recipes.json'); // make sure the path to your recipes.json is correct
var router = require('express').Router();

// GET paginated list of recipes
router.get('/', (req, res) => {
  // Default values for page and limit
  let page = parseInt(req.query.page, 10) || 1;
  let limit = parseInt(req.query.limit, 10) || 3;
  let startIndex = (page - 1) * limit;
  let endIndex = page * limit;

  // Paginate the recipes
  const paginatedRecipes = recipes.slice(startIndex, endIndex);

  // Respond with the paginated recipes
  res.json(paginatedRecipes);
});

module.exports = router;